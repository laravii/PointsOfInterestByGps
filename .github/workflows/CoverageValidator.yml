
name: Coverage Validator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CAMINHO_PROJETO_TESTES: ./PointOfInterestByGpsUnitTests

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.X

    - name: Testes com .NET 5 + xUnit + Fluent Assertions + Coverlet
      run: dotnet test ${{ env.CAMINHO_PROJETO_TESTES }} --verbosity minimal --logger:"html;LogFileName=resultado-testes.html" --collect:"XPlat Code Coverage"

    - name: Instalar ReportGenerator
      if: success()
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.4
  
    - name: Gerar relatório de cobertura de testes com ReportGenerator
      if: success()
      run: |
        cd ${{ env.CAMINHO_PROJETO_TESTES }}/TestResults
        # Acessar diretório gerado com o XML de Cobertura de código
        cd $(ls -d */|head -n 1)
        reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html
  
    - name: Validate code coverage
      if: success()
      run:  |
          cd ${{ env.CAMINHO_PROJETO_TESTES }}/TestResults
          cd $(ls -d */|head -n 1)
          # Extract the coverage percentage from the generated report
          coverage=$(cat coverage.cobertura.xml | grep -oP '(?<=<LineRate>)[^<]+')

          # Convert coverage percentage to numeric value
          coverage_percentage=$(awk "BEGIN {print $coverage * 100}")

          # Check if coverage percentage is below the threshold
          if (( $(echo "$coverage_percentage < 80" | bc -l) )); then
            echo "Code coverage is below the threshold (80%). Coverage percentage: $coverage_percentage%"
            exit 1
          fi
          
    - name: Exclude Program class from coverage
      run: |
          echo "-ToDo.Api.Program" >> coverlet.exclude